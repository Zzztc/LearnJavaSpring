<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    加载外部的属性配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

<!--    声明数据源DataSource-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

<!--    声明SqlSessionFactoryBean，在这个类的内部，创建SqlSessionFactory-->
    <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        指定数据源-->
        <property name="dataSource" ref="myDataSource"/>
<!--        指定mybatis主配置文件
            Resource可以直接使用 value属性赋值
            -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

<!--    声明MapperScannerConfigurer
        SqlSession.getMapper(StudentDao.class)
        MapperScannerConfigurer作用是：
        循环basePackage所表示的包，把保重的每个接口都找到，调用SqlSession.getMapper
        把每个dao接口都创建出dao对象，dao代理对象放在容器中。

        ApplicationContext ctx = ...;
        SqlSessionFactory sqlSessionFactory = ctx.getBean("factory");
        SqlSession session = sqlSessionFactory.openSession();

        for(接口:com.learnspring.dao){
            接口 对象 = session.getMapper(接口);
            springMap.put(接口名的首字母小写，对象)
        }

        -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--        指定SqlSessionFactory对象的名称-->
        <property name="sqlSessionFactoryBeanName" value="factory"/>
<!--        指定基本包，dao接口所在的包名-->
        <property name="basePackage" value="com.learnspring.dao"/>
    </bean>


<!--    声明service-->
    <bean id="buyGoodsService" class="com.learnspring.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <property name="saleDao" ref="saleDao"/>
    </bean>
<!--    声明式事务：不用写代码-->
<!--    1. 声明事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
<!--    2.生命业务方法的事务属性（隔离级别，传播行为，超时）
        id:给业务方法配置事务段代码七个名称，唯一值
        transaction-manager：事务管理器的id
-->
    <tx:advice id="serviceAdvice" transaction-manager="transactionManager">
<!--    给具体的业务方法，说明他需要的事务属性
        name：业务方法名称，配置name的值：1. 业务方法的名称 2. 带有部分通配符的名称 3. 使用*
        propagation：指定传播行为的值
        isolation：隔离级别
        read-only：是否只读，默认是false
        timeout：超时时间
        rollback-for：指定回滚的异常类列表，使用的异常全限定名称
        -->
        <tx:attributes>
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
                       read-only="false" timeout="20"
                       rollback-for="java.lang.NullPointerException,com.learnspring.exception.NotEnoughException"/>
        </tx:attributes>
    </tx:advice>
<!--    声明切入点表达式-->
    <aop:config>
        <aop:pointcut id="servicePointcut" expression="execution(* *..service..*.*(..))"/>
<!--        关联切入点表达式和事务通知-->
        <aop:advisor advice-ref="serviceAdvice" pointcut-ref="servicePointcut"/>
    </aop:config>

</beans>